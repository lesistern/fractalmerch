/**
 * FractalMerch Feedback System
 * Advanced feedback collection and user experience optimization
 */

class FeedbackSystem {
    constructor() {
        this.feedbackData = [];\n        this.surveys = {\n            'nps': {\n                question: '¿Qué tan probable es que recomiendes FractalMerch a un amigo?',\n                type: 'scale',\n                scale: 10,\n                followUp: {\n                    detractor: '¿Qué podríamos mejorar para brindarte una mejor experiencia?',\n                    passive: '¿Hay algo específico que te gustaría que mejoremos?',\n                    promoter: '¡Genial! ¿Qué es lo que más te gusta de FractalMerch?'\n                }\n            },\n            'satisfaction': {\n                question: '¿Qué tan satisfecho estás con tu experiencia de compra?',\n                type: 'emoji',\n                options: [\n                    { emoji: '😡', label: 'Muy insatisfecho', value: 1 },\n                    { emoji: '😞', label: 'Insatisfecho', value: 2 },\n                    { emoji: '😐', label: 'Neutral', value: 3 },\n                    { emoji: '😊', label: 'Satisfecho', value: 4 },\n                    { emoji: '🤩', label: 'Muy satisfecho', value: 5 }\n                ]\n            },\n            'checkout_experience': {\n                question: '¿Cómo fue tu experiencia en el proceso de compra?',\n                type: 'multiple_choice',\n                options: [\n                    'Muy fácil y rápido',\n                    'Fácil pero un poco lento',\n                    'Complicado pero lo logré',\n                    'Muy complicado',\n                    'No pude completarlo'\n                ]\n            },\n            'product_quality': {\n                question: '¿Cómo calificarías la calidad de nuestros productos?',\n                type: 'stars',\n                maxStars: 5\n            },\n            'feature_request': {\n                question: '¿Qué nueva funcionalidad te gustaría ver en FractalMerch?',\n                type: 'text',\n                placeholder: 'Cuéntanos tu idea...'\n            }\n        };\n        \n        this.triggers = {\n            'exit_intent': { survey: 'satisfaction', probability: 0.3 },\n            'purchase_complete': { survey: 'nps', delay: 2000 },\n            'cart_abandonment': { survey: 'checkout_experience', probability: 0.2 },\n            'time_on_site': { survey: 'feature_request', threshold: 300000, probability: 0.1 }, // 5 minutes\n            'product_view': { survey: 'product_quality', threshold: 3, probability: 0.15 }, // After 3 product views\n            'return_visitor': { survey: 'satisfaction', probability: 0.25 }\n        };\n        \n        this.sessionData = {\n            startTime: Date.now(),\n            pageViews: 0,\n            productViews: 0,\n            feedbackShown: [],\n            userActions: []\n        };\n        \n        this.init();\n    }\n    \n    init() {\n        this.loadSessionData();\n        this.setupTriggers();\n        this.setupFeedbackButton();\n        this.setupEventListeners();\n        this.checkTimeBased();\n        this.setupA11ySupport();\n    }\n    \n    /**\n     * Load existing session data\n     */\n    loadSessionData() {\n        const stored = sessionStorage.getItem('feedback_session');\n        if (stored) {\n            try {\n                this.sessionData = { ...this.sessionData, ...JSON.parse(stored) };\n            } catch (error) {\n                console.warn('Failed to load feedback session data:', error);\n            }\n        }\n        \n        // Increment page views\n        this.sessionData.pageViews++;\n        this.saveSessionData();\n    }\n    \n    /**\n     * Save session data\n     */\n    saveSessionData() {\n        sessionStorage.setItem('feedback_session', JSON.stringify(this.sessionData));\n    }\n    \n    /**\n     * Setup feedback triggers\n     */\n    setupTriggers() {\n        // Exit intent trigger\n        this.setupExitIntentTrigger();\n        \n        // Purchase completion trigger\n        this.setupPurchaseCompleteTrigger();\n        \n        // Cart abandonment trigger\n        this.setupCartAbandonmentTrigger();\n        \n        // Product view trigger\n        this.setupProductViewTrigger();\n        \n        // Return visitor trigger\n        this.setupReturnVisitorTrigger();\n    }\n    \n    /**\n     * Setup exit intent trigger\n     */\n    setupExitIntentTrigger() {\n        let exitIntentShown = false;\n        \n        document.addEventListener('mouseleave', (e) => {\n            if (e.clientY <= 0 && !exitIntentShown && this.shouldShowFeedback('exit_intent')) {\n                this.showFeedbackSurvey('satisfaction', {\n                    title: '¡Espera un momento!',\n                    subtitle: 'Antes de irte, ¿podrías ayudarnos con una pregunta rápida?',\n                    context: 'exit_intent'\n                });\n                exitIntentShown = true;\n            }\n        });\n    }\n    \n    /**\n     * Setup purchase complete trigger\n     */\n    setupPurchaseCompleteTrigger() {\n        // Listen for purchase completion events\n        document.addEventListener('purchaseComplete', (e) => {\n            const trigger = this.triggers.purchase_complete;\n            setTimeout(() => {\n                this.showFeedbackSurvey('nps', {\n                    title: '¡Gracias por tu compra!',\n                    subtitle: 'Tu opinión nos ayuda a mejorar',\n                    context: 'post_purchase',\n                    orderData: e.detail\n                });\n            }, trigger.delay);\n        });\n        \n        // Also check if we're on a thank you page\n        if (window.location.pathname.includes('thank-you') || window.location.pathname.includes('success')) {\n            setTimeout(() => {\n                this.showFeedbackSurvey('nps', {\n                    title: '¡Gracias por tu compra!',\n                    subtitle: 'Tu opinión nos ayuda a mejorar',\n                    context: 'post_purchase'\n                });\n            }, 3000);\n        }\n    }\n    \n    /**\n     * Setup cart abandonment trigger\n     */\n    setupCartAbandonmentTrigger() {\n        document.addEventListener('cartAbandonment', (e) => {\n            if (this.shouldShowFeedback('cart_abandonment')) {\n                this.showFeedbackSurvey('checkout_experience', {\n                    title: 'Nos gustaría saber...',\n                    subtitle: '¿Hubo algo que dificultó completar tu compra?',\n                    context: 'cart_abandonment'\n                });\n            }\n        });\n    }\n    \n    /**\n     * Setup product view trigger\n     */\n    setupProductViewTrigger() {\n        // Track product page views\n        if (window.location.pathname.includes('product-detail') || document.querySelector('.product-detail')) {\n            this.sessionData.productViews++;\n            this.saveSessionData();\n            \n            const trigger = this.triggers.product_view;\n            if (this.sessionData.productViews >= trigger.threshold && this.shouldShowFeedback('product_view')) {\n                setTimeout(() => {\n                    this.showFeedbackSurvey('product_quality', {\n                        title: 'Vemos que te interesan nuestros productos',\n                        subtitle: '¿Qué opinas de nuestra calidad?',\n                        context: 'product_browsing'\n                    });\n                }, 5000);\n            }\n        }\n    }\n    \n    /**\n     * Setup return visitor trigger\n     */\n    setupReturnVisitorTrigger() {\n        const visitCount = parseInt(localStorage.getItem('visit_count') || '0') + 1;\n        localStorage.setItem('visit_count', visitCount.toString());\n        \n        if (visitCount > 2 && this.shouldShowFeedback('return_visitor')) {\n            setTimeout(() => {\n                this.showFeedbackSurvey('satisfaction', {\n                    title: '¡Nos alegra verte de nuevo!',\n                    subtitle: '¿Cómo ha sido tu experiencia con nosotros?',\n                    context: 'return_visitor'\n                });\n            }, 10000); // After 10 seconds\n        }\n    }\n    \n    /**\n     * Check if feedback should be shown based on probability\n     */\n    shouldShowFeedback(triggerType) {\n        const trigger = this.triggers[triggerType];\n        if (!trigger) return false;\n        \n        // Check if already shown this session\n        if (this.sessionData.feedbackShown.includes(triggerType)) {\n            return false;\n        }\n        \n        // Check probability\n        if (trigger.probability && Math.random() > trigger.probability) {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Show feedback survey\n     */\n    showFeedbackSurvey(surveyType, options = {}) {\n        const survey = this.surveys[surveyType];\n        if (!survey) {\n            console.warn('Survey type not found:', surveyType);\n            return;\n        }\n        \n        // Mark as shown\n        this.sessionData.feedbackShown.push(options.context || surveyType);\n        this.saveSessionData();\n        \n        // Create survey modal\n        const modal = this.createSurveyModal(survey, surveyType, options);\n        document.body.appendChild(modal);\n        \n        // Show with animation\n        setTimeout(() => {\n            modal.classList.add('show');\n        }, 100);\n        \n        // Track survey display\n        this.trackEvent('survey_shown', {\n            survey_type: surveyType,\n            context: options.context,\n            trigger_time: Date.now() - this.sessionData.startTime\n        });\n    }\n    \n    /**\n     * Create survey modal\n     */\n    createSurveyModal(survey, surveyType, options) {\n        const modal = document.createElement('div');\n        modal.className = 'feedback-modal-overlay';\n        modal.setAttribute('role', 'dialog');\n        modal.setAttribute('aria-modal', 'true');\n        modal.setAttribute('aria-labelledby', 'feedback-title');\n        \n        const modalContent = this.generateSurveyContent(survey, surveyType, options);\n        modal.innerHTML = modalContent;\n        \n        // Add event listeners\n        this.addSurveyEventListeners(modal, survey, surveyType, options);\n        \n        // Add styles\n        this.addFeedbackStyles();\n        \n        return modal;\n    }\n    \n    /**\n     * Generate survey content HTML\n     */\n    generateSurveyContent(survey, surveyType, options) {\n        const title = options.title || 'Tu opinión importa';\n        const subtitle = options.subtitle || 'Ayúdanos a mejorar tu experiencia';\n        \n        let questionHTML = '';\n        \n        switch (survey.type) {\n            case 'scale':\n                questionHTML = this.generateScaleQuestion(survey);\n                break;\n            case 'emoji':\n                questionHTML = this.generateEmojiQuestion(survey);\n                break;\n            case 'multiple_choice':\n                questionHTML = this.generateMultipleChoiceQuestion(survey);\n                break;\n            case 'stars':\n                questionHTML = this.generateStarsQuestion(survey);\n                break;\n            case 'text':\n                questionHTML = this.generateTextQuestion(survey);\n                break;\n        }\n        \n        return `\n            <div class=\"feedback-modal\">\n                <div class=\"feedback-header\">\n                    <h3 id=\"feedback-title\">${title}</h3>\n                    <p class=\"feedback-subtitle\">${subtitle}</p>\n                    <button class=\"feedback-close\" aria-label=\"Cerrar encuesta\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n                <div class=\"feedback-body\">\n                    <div class=\"feedback-question\">\n                        <p class=\"question-text\">${survey.question}</p>\n                        ${questionHTML}\n                    </div>\n                    <div class=\"feedback-follow-up\" style=\"display: none;\">\n                        <p class=\"follow-up-text\"></p>\n                        <textarea class=\"follow-up-input\" placeholder=\"Cuéntanos más...\" rows=\"3\"></textarea>\n                    </div>\n                </div>\n                <div class=\"feedback-actions\">\n                    <button class=\"btn btn-primary feedback-submit\" disabled>Enviar</button>\n                    <button class=\"btn btn-secondary feedback-skip\">Omitir</button>\n                </div>\n                <div class=\"feedback-thank-you\" style=\"display: none;\">\n                    <div class=\"thank-you-content\">\n                        <i class=\"fas fa-heart\" style=\"color: #FF9500; font-size: 2rem;\"></i>\n                        <h4>¡Gracias por tu feedback!</h4>\n                        <p>Tu opinión nos ayuda a crear una mejor experiencia para todos.</p>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Generate scale question (NPS style)\n     */\n    generateScaleQuestion(survey) {\n        const scale = survey.scale || 10;\n        let scaleHTML = '<div class=\"scale-container\">';\n        \n        for (let i = 0; i <= scale; i++) {\n            scaleHTML += `\n                <button class=\"scale-option\" data-value=\"${i}\" aria-label=\"Calificación ${i} de ${scale}\">\n                    ${i}\n                </button>\n            `;\n        }\n        \n        scaleHTML += '</div>';\n        scaleHTML += `\n            <div class=\"scale-labels\">\n                <span>Muy improbable</span>\n                <span>Muy probable</span>\n            </div>\n        `;\n        \n        return scaleHTML;\n    }\n    \n    /**\n     * Generate emoji question\n     */\n    generateEmojiQuestion(survey) {\n        let emojiHTML = '<div class=\"emoji-container\">';\n        \n        survey.options.forEach(option => {\n            emojiHTML += `\n                <button class=\"emoji-option\" data-value=\"${option.value}\" aria-label=\"${option.label}\">\n                    <span class=\"emoji\">${option.emoji}</span>\n                    <span class=\"emoji-label\">${option.label}</span>\n                </button>\n            `;\n        });\n        \n        emojiHTML += '</div>';\n        return emojiHTML;\n    }\n    \n    /**\n     * Generate multiple choice question\n     */\n    generateMultipleChoiceQuestion(survey) {\n        let choiceHTML = '<div class=\"choice-container\">';\n        \n        survey.options.forEach((option, index) => {\n            choiceHTML += `\n                <label class=\"choice-option\">\n                    <input type=\"radio\" name=\"feedback-choice\" value=\"${option}\" id=\"choice-${index}\">\n                    <span class=\"choice-label\">${option}</span>\n                </label>\n            `;\n        });\n        \n        choiceHTML += '</div>';\n        return choiceHTML;\n    }\n    \n    /**\n     * Generate stars question\n     */\n    generateStarsQuestion(survey) {\n        const maxStars = survey.maxStars || 5;\n        let starsHTML = '<div class=\"stars-container\">';\n        \n        for (let i = 1; i <= maxStars; i++) {\n            starsHTML += `\n                <button class=\"star-option\" data-value=\"${i}\" aria-label=\"${i} de ${maxStars} estrellas\">\n                    <i class=\"fas fa-star\"></i>\n                </button>\n            `;\n        }\n        \n        starsHTML += '</div>';\n        return starsHTML;\n    }\n    \n    /**\n     * Generate text question\n     */\n    generateTextQuestion(survey) {\n        return `\n            <div class=\"text-container\">\n                <textarea class=\"text-input\" placeholder=\"${survey.placeholder || 'Escribe tu respuesta...'}\" rows=\"4\"></textarea>\n            </div>\n        `;\n    }\n    \n    /**\n     * Add survey event listeners\n     */\n    addSurveyEventListeners(modal, survey, surveyType, options) {\n        const submitBtn = modal.querySelector('.feedback-submit');\n        const skipBtn = modal.querySelector('.feedback-skip');\n        const closeBtn = modal.querySelector('.feedback-close');\n        \n        let selectedValue = null;\n        let followUpText = '';\n        \n        // Handle different question types\n        switch (survey.type) {\n            case 'scale':\n                this.handleScaleInput(modal, survey, (value) => {\n                    selectedValue = value;\n                    submitBtn.disabled = false;\n                    this.handleNPSFollowUp(modal, survey, value);\n                });\n                break;\n                \n            case 'emoji':\n                this.handleEmojiInput(modal, (value) => {\n                    selectedValue = value;\n                    submitBtn.disabled = false;\n                });\n                break;\n                \n            case 'multiple_choice':\n                this.handleChoiceInput(modal, (value) => {\n                    selectedValue = value;\n                    submitBtn.disabled = false;\n                });\n                break;\n                \n            case 'stars':\n                this.handleStarsInput(modal, (value) => {\n                    selectedValue = value;\n                    submitBtn.disabled = false;\n                });\n                break;\n                \n            case 'text':\n                this.handleTextInput(modal, (value) => {\n                    selectedValue = value;\n                    submitBtn.disabled = value.trim().length === 0;\n                });\n                break;\n        }\n        \n        // Submit handler\n        submitBtn.addEventListener('click', () => {\n            const followUpInput = modal.querySelector('.follow-up-input');\n            if (followUpInput) {\n                followUpText = followUpInput.value;\n            }\n            \n            this.submitFeedback(surveyType, {\n                question: survey.question,\n                answer: selectedValue,\n                followUp: followUpText,\n                context: options.context,\n                timestamp: Date.now()\n            });\n            \n            this.showThankYou(modal);\n        });\n        \n        // Skip handler\n        skipBtn.addEventListener('click', () => {\n            this.trackEvent('survey_skipped', {\n                survey_type: surveyType,\n                context: options.context\n            });\n            this.closeFeedbackModal(modal);\n        });\n        \n        // Close handler\n        closeBtn.addEventListener('click', () => {\n            this.trackEvent('survey_closed', {\n                survey_type: surveyType,\n                context: options.context\n            });\n            this.closeFeedbackModal(modal);\n        });\n        \n        // ESC key handler\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeFeedbackModal(modal);\n            }\n        });\n    }\n    \n    /**\n     * Handle scale input (NPS)\n     */\n    handleScaleInput(modal, survey, callback) {\n        const options = modal.querySelectorAll('.scale-option');\n        \n        options.forEach(option => {\n            option.addEventListener('click', () => {\n                // Remove previous selection\n                options.forEach(opt => opt.classList.remove('selected'));\n                \n                // Add selection\n                option.classList.add('selected');\n                \n                const value = parseInt(option.dataset.value);\n                callback(value);\n            });\n        });\n    }\n    \n    /**\n     * Handle NPS follow-up questions\n     */\n    handleNPSFollowUp(modal, survey, score) {\n        if (!survey.followUp) return;\n        \n        const followUpContainer = modal.querySelector('.feedback-follow-up');\n        const followUpText = modal.querySelector('.follow-up-text');\n        \n        let followUpQuestion = '';\n        \n        if (score <= 6) {\n            followUpQuestion = survey.followUp.detractor;\n        } else if (score <= 8) {\n            followUpQuestion = survey.followUp.passive;\n        } else {\n            followUpQuestion = survey.followUp.promoter;\n        }\n        \n        if (followUpQuestion) {\n            followUpText.textContent = followUpQuestion;\n            followUpContainer.style.display = 'block';\n        }\n    }\n    \n    /**\n     * Handle emoji input\n     */\n    handleEmojiInput(modal, callback) {\n        const options = modal.querySelectorAll('.emoji-option');\n        \n        options.forEach(option => {\n            option.addEventListener('click', () => {\n                // Remove previous selection\n                options.forEach(opt => opt.classList.remove('selected'));\n                \n                // Add selection\n                option.classList.add('selected');\n                \n                const value = parseInt(option.dataset.value);\n                callback(value);\n            });\n        });\n    }\n    \n    /**\n     * Handle multiple choice input\n     */\n    handleChoiceInput(modal, callback) {\n        const inputs = modal.querySelectorAll('input[name=\"feedback-choice\"]');\n        \n        inputs.forEach(input => {\n            input.addEventListener('change', () => {\n                if (input.checked) {\n                    callback(input.value);\n                }\n            });\n        });\n    }\n    \n    /**\n     * Handle stars input\n     */\n    handleStarsInput(modal, callback) {\n        const stars = modal.querySelectorAll('.star-option');\n        \n        stars.forEach((star, index) => {\n            star.addEventListener('click', () => {\n                const value = parseInt(star.dataset.value);\n                \n                // Update star display\n                stars.forEach((s, i) => {\n                    if (i < value) {\n                        s.classList.add('selected');\n                    } else {\n                        s.classList.remove('selected');\n                    }\n                });\n                \n                callback(value);\n            });\n            \n            // Hover effect\n            star.addEventListener('mouseenter', () => {\n                const value = parseInt(star.dataset.value);\n                stars.forEach((s, i) => {\n                    if (i < value) {\n                        s.classList.add('hover');\n                    } else {\n                        s.classList.remove('hover');\n                    }\n                });\n            });\n        });\n        \n        // Remove hover on mouse leave\n        const container = modal.querySelector('.stars-container');\n        container.addEventListener('mouseleave', () => {\n            stars.forEach(s => s.classList.remove('hover'));\n        });\n    }\n    \n    /**\n     * Handle text input\n     */\n    handleTextInput(modal, callback) {\n        const input = modal.querySelector('.text-input');\n        \n        input.addEventListener('input', () => {\n            callback(input.value);\n        });\n    }\n    \n    /**\n     * Submit feedback\n     */\n    submitFeedback(surveyType, data) {\n        // Store locally\n        this.feedbackData.push(data);\n        this.saveFeedbackData();\n        \n        // Send to backend\n        this.sendFeedbackToBackend(surveyType, data);\n        \n        // Track submission\n        this.trackEvent('feedback_submitted', {\n            survey_type: surveyType,\n            answer: data.answer,\n            has_follow_up: !!data.followUp,\n            context: data.context\n        });\n    }\n    \n    /**\n     * Send feedback to backend\n     */\n    sendFeedbackToBackend(surveyType, data) {\n        fetch('/api/feedback/submit', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                survey_type: surveyType,\n                user_id: this.getUserId(),\n                session_id: this.getSessionId(),\n                ...data\n            })\n        }).catch(error => {\n            console.warn('Failed to send feedback to backend:', error);\n        });\n    }\n    \n    /**\n     * Show thank you message\n     */\n    showThankYou(modal) {\n        const body = modal.querySelector('.feedback-body');\n        const actions = modal.querySelector('.feedback-actions');\n        const thankYou = modal.querySelector('.feedback-thank-you');\n        \n        body.style.display = 'none';\n        actions.style.display = 'none';\n        thankYou.style.display = 'block';\n        \n        // Auto-close after 3 seconds\n        setTimeout(() => {\n            this.closeFeedbackModal(modal);\n        }, 3000);\n    }\n    \n    /**\n     * Close feedback modal\n     */\n    closeFeedbackModal(modal) {\n        modal.classList.remove('show');\n        setTimeout(() => {\n            if (modal.parentElement) {\n                modal.remove();\n            }\n        }, 300);\n    }\n    \n    /**\n     * Setup feedback button\n     */\n    setupFeedbackButton() {\n        const feedbackBtn = document.createElement('button');\n        feedbackBtn.className = 'feedback-floating-btn';\n        feedbackBtn.innerHTML = `\n            <i class=\"fas fa-comment\"></i>\n            <span class=\"feedback-btn-text\">Feedback</span>\n        `;\n        feedbackBtn.setAttribute('aria-label', 'Enviar feedback');\n        \n        feedbackBtn.addEventListener('click', () => {\n            this.showFeedbackSurvey('satisfaction', {\n                title: 'Tu opinión nos importa',\n                subtitle: '¿Cómo podemos mejorar tu experiencia?',\n                context: 'manual_feedback'\n            });\n        });\n        \n        document.body.appendChild(feedbackBtn);\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Track user actions\n        document.addEventListener('click', (e) => {\n            this.sessionData.userActions.push({\n                type: 'click',\n                element: e.target.tagName,\n                className: e.target.className,\n                timestamp: Date.now()\n            });\n        });\n        \n        // Track form interactions\n        document.addEventListener('submit', (e) => {\n            this.sessionData.userActions.push({\n                type: 'form_submit',\n                form: e.target.id || e.target.className,\n                timestamp: Date.now()\n            });\n        });\n    }\n    \n    /**\n     * Check time-based triggers\n     */\n    checkTimeBased() {\n        setInterval(() => {\n            const timeOnSite = Date.now() - this.sessionData.startTime;\n            const trigger = this.triggers.time_on_site;\n            \n            if (timeOnSite >= trigger.threshold && this.shouldShowFeedback('time_on_site')) {\n                this.showFeedbackSurvey('feature_request', {\n                    title: 'Vemos que te quedaste un rato',\n                    subtitle: '¿Hay algo que te gustaría que mejoremos?',\n                    context: 'time_on_site'\n                });\n            }\n        }, 60000); // Check every minute\n    }\n    \n    /**\n     * Setup accessibility support\n     */\n    setupA11ySupport() {\n        // Announce feedback opportunities to screen readers\n        document.addEventListener('DOMContentLoaded', () => {\n            const announcement = document.createElement('div');\n            announcement.setAttribute('aria-live', 'polite');\n            announcement.className = 'sr-only';\n            announcement.id = 'feedback-announcements';\n            document.body.appendChild(announcement);\n        });\n    }\n    \n    /**\n     * Add feedback styles\n     */\n    addFeedbackStyles() {\n        if (document.getElementById('feedback-styles')) return;\n        \n        const style = document.createElement('style');\n        style.id = 'feedback-styles';\n        style.textContent = `\n            .feedback-modal-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.7);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10000;\n                opacity: 0;\n                transition: opacity 0.3s ease;\n            }\n            \n            .feedback-modal-overlay.show {\n                opacity: 1;\n            }\n            \n            .feedback-modal {\n                background: white;\n                border-radius: 12px;\n                max-width: 500px;\n                width: 90%;\n                max-height: 80vh;\n                overflow-y: auto;\n                transform: translateY(20px);\n                transition: transform 0.3s ease;\n                box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n            }\n            \n            .feedback-modal-overlay.show .feedback-modal {\n                transform: translateY(0);\n            }\n            \n            .feedback-header {\n                padding: 1.5rem;\n                border-bottom: 1px solid #e5e7eb;\n                position: relative;\n            }\n            \n            .feedback-header h3 {\n                margin: 0 0 0.5rem 0;\n                color: var(--fractal-primary);\n                font-size: 1.25rem;\n                font-weight: 700;\n            }\n            \n            .feedback-subtitle {\n                margin: 0;\n                color: #6b7280;\n                font-size: 0.9rem;\n            }\n            \n            .feedback-close {\n                position: absolute;\n                top: 1rem;\n                right: 1rem;\n                background: none;\n                border: none;\n                font-size: 1.25rem;\n                cursor: pointer;\n                padding: 0.5rem;\n                border-radius: 4px;\n                color: #6b7280;\n            }\n            \n            .feedback-close:hover {\n                background: #f3f4f6;\n                color: #374151;\n            }\n            \n            .feedback-body {\n                padding: 1.5rem;\n            }\n            \n            .question-text {\n                font-size: 1rem;\n                font-weight: 600;\n                color: #374151;\n                margin-bottom: 1.5rem;\n                line-height: 1.5;\n            }\n            \n            /* Scale styles */\n            .scale-container {\n                display: flex;\n                gap: 0.5rem;\n                margin-bottom: 1rem;\n                flex-wrap: wrap;\n            }\n            \n            .scale-option {\n                width: 40px;\n                height: 40px;\n                border: 2px solid #d1d5db;\n                background: white;\n                border-radius: 6px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.2s;\n            }\n            \n            .scale-option:hover {\n                border-color: var(--fractal-primary);\n                background: #fff7ed;\n            }\n            \n            .scale-option.selected {\n                background: var(--fractal-primary);\n                border-color: var(--fractal-primary);\n                color: white;\n            }\n            \n            .scale-labels {\n                display: flex;\n                justify-content: space-between;\n                font-size: 0.8rem;\n                color: #6b7280;\n            }\n            \n            /* Emoji styles */\n            .emoji-container {\n                display: flex;\n                gap: 1rem;\n                justify-content: center;\n                flex-wrap: wrap;\n            }\n            \n            .emoji-option {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                padding: 1rem;\n                border: 2px solid #e5e7eb;\n                border-radius: 8px;\n                background: white;\n                cursor: pointer;\n                transition: all 0.2s;\n                min-width: 80px;\n            }\n            \n            .emoji-option:hover {\n                border-color: var(--fractal-primary);\n                background: #fff7ed;\n            }\n            \n            .emoji-option.selected {\n                border-color: var(--fractal-primary);\n                background: var(--fractal-primary);\n                color: white;\n            }\n            \n            .emoji {\n                font-size: 2rem;\n                margin-bottom: 0.5rem;\n            }\n            \n            .emoji-label {\n                font-size: 0.8rem;\n                text-align: center;\n            }\n            \n            /* Choice styles */\n            .choice-container {\n                display: flex;\n                flex-direction: column;\n                gap: 0.75rem;\n            }\n            \n            .choice-option {\n                display: flex;\n                align-items: center;\n                padding: 1rem;\n                border: 2px solid #e5e7eb;\n                border-radius: 6px;\n                cursor: pointer;\n                transition: all 0.2s;\n            }\n            \n            .choice-option:hover {\n                border-color: var(--fractal-primary);\n                background: #fff7ed;\n            }\n            \n            .choice-option input {\n                margin-right: 0.75rem;\n                accent-color: var(--fractal-primary);\n            }\n            \n            .choice-option input:checked + .choice-label {\n                font-weight: 600;\n            }\n            \n            /* Stars styles */\n            .stars-container {\n                display: flex;\n                gap: 0.25rem;\n                justify-content: center;\n            }\n            \n            .star-option {\n                background: none;\n                border: none;\n                font-size: 2rem;\n                color: #d1d5db;\n                cursor: pointer;\n                transition: all 0.2s;\n                padding: 0.25rem;\n            }\n            \n            .star-option:hover,\n            .star-option.hover {\n                color: #fbbf24;\n                transform: scale(1.1);\n            }\n            \n            .star-option.selected {\n                color: var(--fractal-primary);\n            }\n            \n            /* Text styles */\n            .text-container {\n                width: 100%;\n            }\n            \n            .text-input,\n            .follow-up-input {\n                width: 100%;\n                padding: 0.75rem;\n                border: 2px solid #d1d5db;\n                border-radius: 6px;\n                font-family: inherit;\n                font-size: 0.9rem;\n                resize: vertical;\n                transition: border-color 0.2s;\n            }\n            \n            .text-input:focus,\n            .follow-up-input:focus {\n                outline: none;\n                border-color: var(--fractal-primary);\n                box-shadow: 0 0 0 3px rgba(255, 149, 0, 0.1);\n            }\n            \n            /* Follow-up styles */\n            .feedback-follow-up {\n                margin-top: 1.5rem;\n                padding-top: 1.5rem;\n                border-top: 1px solid #e5e7eb;\n            }\n            \n            .follow-up-text {\n                font-weight: 600;\n                color: #374151;\n                margin-bottom: 1rem;\n            }\n            \n            /* Actions styles */\n            .feedback-actions {\n                padding: 1.5rem;\n                border-top: 1px solid #e5e7eb;\n                display: flex;\n                gap: 1rem;\n            }\n            \n            .feedback-actions .btn {\n                flex: 1;\n                padding: 0.75rem 1.5rem;\n                border-radius: 6px;\n                font-weight: 600;\n                border: none;\n                cursor: pointer;\n                transition: all 0.2s;\n            }\n            \n            .feedback-submit {\n                background: var(--fractal-primary);\n                color: white;\n            }\n            \n            .feedback-submit:hover:not(:disabled) {\n                background: color-mix(in srgb, var(--fractal-primary) 90%, black);\n                transform: translateY(-1px);\n            }\n            \n            .feedback-submit:disabled {\n                background: #d1d5db;\n                cursor: not-allowed;\n            }\n            \n            .feedback-skip {\n                background: #f3f4f6;\n                color: #374151;\n            }\n            \n            .feedback-skip:hover {\n                background: #e5e7eb;\n            }\n            \n            /* Thank you styles */\n            .feedback-thank-you {\n                padding: 3rem 1.5rem;\n                text-align: center;\n            }\n            \n            .thank-you-content h4 {\n                margin: 1rem 0 0.5rem 0;\n                color: #374151;\n                font-size: 1.25rem;\n            }\n            \n            .thank-you-content p {\n                margin: 0;\n                color: #6b7280;\n            }\n            \n            /* Floating button styles */\n            .feedback-floating-btn {\n                position: fixed;\n                bottom: 2rem;\n                right: 2rem;\n                background: var(--fractal-primary);\n                color: white;\n                border: none;\n                border-radius: 50px;\n                padding: 1rem 1.5rem;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n                cursor: pointer;\n                transition: all 0.3s ease;\n                z-index: 1000;\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n                font-weight: 600;\n            }\n            \n            .feedback-floating-btn:hover {\n                background: color-mix(in srgb, var(--fractal-primary) 90%, black);\n                transform: translateY(-2px);\n                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n            }\n            \n            .feedback-btn-text {\n                font-size: 0.9rem;\n            }\n            \n            @media (max-width: 768px) {\n                .feedback-floating-btn {\n                    bottom: 1rem;\n                    right: 1rem;\n                    padding: 0.75rem;\n                }\n                \n                .feedback-btn-text {\n                    display: none;\n                }\n                \n                .scale-container {\n                    justify-content: center;\n                }\n                \n                .scale-option {\n                    width: 35px;\n                    height: 35px;\n                    font-size: 0.9rem;\n                }\n                \n                .emoji-container {\n                    gap: 0.5rem;\n                }\n                \n                .emoji-option {\n                    min-width: 60px;\n                    padding: 0.75rem;\n                }\n                \n                .emoji {\n                    font-size: 1.5rem;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Save feedback data locally\n     */\n    saveFeedbackData() {\n        localStorage.setItem('feedback_data', JSON.stringify(this.feedbackData));\n    }\n    \n    /**\n     * Track analytics event\n     */\n    trackEvent(event, data) {\n        // Send to analytics service\n        if (typeof gtag !== 'undefined') {\n            gtag('event', event, data);\n        }\n        \n        // Send to our analytics API\n        fetch('/api/analytics/feedback', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                event: event,\n                data: data,\n                timestamp: Date.now(),\n                session_id: this.getSessionId(),\n                user_id: this.getUserId()\n            })\n        }).catch(error => {\n            console.warn('Failed to track feedback event:', error);\n        });\n    }\n    \n    /**\n     * Get user ID\n     */\n    getUserId() {\n        let userId = localStorage.getItem('feedback_user_id');\n        if (!userId) {\n            userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n            localStorage.setItem('feedback_user_id', userId);\n        }\n        return userId;\n    }\n    \n    /**\n     * Get session ID\n     */\n    getSessionId() {\n        let sessionId = sessionStorage.getItem('feedback_session_id');\n        if (!sessionId) {\n            sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n            sessionStorage.setItem('feedback_session_id', sessionId);\n        }\n        return sessionId;\n    }\n    \n    /**\n     * Get feedback summary\n     */\n    getFeedbackSummary() {\n        return {\n            totalResponses: this.feedbackData.length,\n            sessionData: this.sessionData,\n            responses: this.feedbackData\n        };\n    }\n}\n\n// Auto-initialize feedback system\nlet feedbackSystem;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    feedbackSystem = new FeedbackSystem();\n    \n    // Expose globally\n    window.FeedbackSystem = feedbackSystem;\n});\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = FeedbackSystem;\n}