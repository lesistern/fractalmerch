/**
 * FractalMerch Conversion Funnel Optimizer
 * Advanced cart abandonment recovery and conversion optimization
 */

class ConversionFunnelOptimizer {
    constructor() {
        this.funnelSteps = {
            'product_view': { name: 'Product View', weight: 1 },
            'add_to_cart': { name: 'Add to Cart', weight: 2 },
            'cart_view': { name: 'Cart View', weight: 3 },
            'checkout_start': { name: 'Checkout Start', weight: 4 },
            'checkout_info': { name: 'Checkout Info', weight: 5 },
            'checkout_shipping': { name: 'Checkout Shipping', weight: 6 },
            'checkout_payment': { name: 'Checkout Payment', weight: 7 },
            'purchase_complete': { name: 'Purchase Complete', weight: 8 }
        };
        
        this.userJourney = [];
        this.sessionData = {};
        this.exitIntent = false;
        this.cartAbandonment = null;
        this.personalizedOffers = [];
        
        this.init();
    }
    
    init() {
        this.setupSessionTracking();
        this.setupExitIntentDetection();
        this.setupCartAbandonmentTracking();
        this.setupPersonalizedOffers();
        this.setupUrgencyTriggers();
        this.setupSocialProof();
        this.setupRetargeting();
        this.setupEmailRecovery();
        this.initializeFunnelTracking();
    }
    
    /**
     * Setup session tracking for funnel analysis
     */
    setupSessionTracking() {
        this.sessionData = {
            sessionId: this.generateSessionId(),
            startTime: Date.now(),
            userId: this.getUserId(),
            referrer: document.referrer,
            userAgent: navigator.userAgent,
            screenResolution: `${screen.width}x${screen.height}`,
            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            language: navigator.language,
            currentStep: 'product_view',
            timeOnStep: Date.now(),
            previousSteps: [],
            abandonmentReasons: [],
            recoveryAttempts: 0
        };
        
        // Load existing session data
        const existingSession = sessionStorage.getItem('conversionFunnel');
        if (existingSession) {
            try {
                const parsed = JSON.parse(existingSession);
                this.sessionData = { ...this.sessionData, ...parsed };
            } catch (error) {
                console.warn('Failed to parse existing session data:', error);
            }
        }
        
        // Track page views
        this.trackPageView();
        
        // Save session data periodically
        setInterval(() => {
            this.saveSessionData();
        }, 10000); // Every 10 seconds
        
        // Save on page unload
        window.addEventListener('beforeunload', () => {
            this.saveSessionData();
        });
    }
    
    /**
     * Generate unique session ID
     */
    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    /**
     * Get or create user ID
     */
    getUserId() {
        let userId = localStorage.getItem('conversion_user_id');
        if (!userId) {
            userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('conversion_user_id', userId);
        }
        return userId;
    }
    
    /**
     * Track funnel step progression
     */
    trackFunnelStep(step, data = {}) {
        const now = Date.now();
        const timeOnPreviousStep = now - this.sessionData.timeOnStep;
        
        // Record previous step time
        if (this.sessionData.currentStep) {
            this.sessionData.previousSteps.push({
                step: this.sessionData.currentStep,
                timeSpent: timeOnPreviousStep,
                timestamp: this.sessionData.timeOnStep
            });
        }
        
        // Update current step
        this.sessionData.currentStep = step;
        this.sessionData.timeOnStep = now;
        
        // Track in user journey
        this.userJourney.push({
            step: step,
            timestamp: now,
            data: data,
            timeFromStart: now - this.sessionData.startTime
        });
        
        // Send analytics
        this.sendFunnelAnalytics(step, {
            timeOnPreviousStep,
            totalTimeInFunnel: now - this.sessionData.startTime,
            ...data
        });
        
        // Check for optimization opportunities
        this.checkOptimizationTriggers(step);
        
        // Save session data
        this.saveSessionData();
        
        console.log(`Funnel step tracked: ${step}`, data);
    }
    
    /**
     * Setup exit intent detection
     */\n    setupExitIntentDetection() {\n        let exitIntentTriggered = false;\n        \n        // Mouse leave detection\n        document.addEventListener('mouseleave', (e) => {\n            if (e.clientY <= 0 && !exitIntentTriggered) {\n                this.handleExitIntent();\n                exitIntentTriggered = true;\n            }\n        });\n        \n        // Mobile scroll to top detection\n        let lastScrollY = window.scrollY;\n        document.addEventListener('scroll', () => {\n            if (window.scrollY < lastScrollY && window.scrollY === 0 && !exitIntentTriggered) {\n                this.handleExitIntent();\n                exitIntentTriggered = true;\n            }\n            lastScrollY = window.scrollY;\n        });\n        \n        // Tab visibility change\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden && !exitIntentTriggered) {\n                this.handleExitIntent();\n                exitIntentTriggered = true;\n            }\n        });\n        \n        // Reset exit intent after 30 seconds\n        setInterval(() => {\n            exitIntentTriggered = false;\n        }, 30000);\n    }\n    \n    /**\n     * Handle exit intent trigger\n     */\n    handleExitIntent() {\n        this.exitIntent = true;\n        \n        const currentStep = this.sessionData.currentStep;\n        const cart = this.getCartData();\n        \n        // Don't trigger on purchase complete or empty cart\n        if (currentStep === 'purchase_complete' || !cart || cart.items.length === 0) {\n            return;\n        }\n        \n        // Record abandonment\n        this.recordAbandonment('exit_intent', currentStep);\n        \n        // Show retention offer based on funnel step\n        this.showRetentionOffer(currentStep);\n        \n        // Track exit intent\n        this.sendFunnelAnalytics('exit_intent', {\n            step: currentStep,\n            cartValue: cart.total,\n            itemCount: cart.items.length\n        });\n    }\n    \n    /**\n     * Setup cart abandonment tracking\n     */\n    setupCartAbandonmentTracking() {\n        // Track cart modifications\n        document.addEventListener('cartUpdated', (e) => {\n            const { action, product, cart } = e.detail;\n            \n            if (action === 'add') {\n                this.trackFunnelStep('add_to_cart', {\n                    product: product.name,\n                    price: product.price,\n                    cartTotal: cart.total,\n                    itemCount: cart.items.length\n                });\n                \n                // Start abandonment timer\n                this.startAbandonmentTimer();\n            }\n            \n            if (action === 'remove' && cart.items.length === 0) {\n                this.recordAbandonment('cart_empty', 'cart_view');\n            }\n        });\n        \n        // Track cart view\n        if (window.location.pathname.includes('cart') || document.querySelector('.cart-modal')) {\n            this.trackFunnelStep('cart_view');\n        }\n        \n        // Track checkout start\n        document.addEventListener('click', (e) => {\n            if (e.target.closest('.checkout-btn, .proceed-checkout')) {\n                this.trackFunnelStep('checkout_start');\n            }\n        });\n    }\n    \n    /**\n     * Start cart abandonment timer\n     */\n    startAbandonmentTimer() {\n        // Clear existing timer\n        if (this.cartAbandonment) {\n            clearTimeout(this.cartAbandonment);\n        }\n        \n        // Set 15-minute abandonment timer\n        this.cartAbandonment = setTimeout(() => {\n            const cart = this.getCartData();\n            if (cart && cart.items.length > 0) {\n                this.recordAbandonment('timeout', this.sessionData.currentStep);\n                this.scheduleEmailRecovery();\n            }\n        }, 15 * 60 * 1000); // 15 minutes\n    }\n    \n    /**\n     * Record cart abandonment\n     */\n    recordAbandonment(reason, step) {\n        const cart = this.getCartData();\n        const abandonmentData = {\n            sessionId: this.sessionData.sessionId,\n            userId: this.sessionData.userId,\n            reason: reason,\n            step: step,\n            cartValue: cart ? cart.total : 0,\n            itemCount: cart ? cart.items.length : 0,\n            items: cart ? cart.items : [],\n            timeInFunnel: Date.now() - this.sessionData.startTime,\n            previousSteps: this.sessionData.previousSteps,\n            timestamp: Date.now()\n        };\n        \n        // Store abandonment data\n        const abandonments = JSON.parse(localStorage.getItem('cart_abandonments') || '[]');\n        abandonments.push(abandonmentData);\n        \n        // Keep only last 10 abandonments\n        if (abandonments.length > 10) {\n            abandonments.splice(0, abandonments.length - 10);\n        }\n        \n        localStorage.setItem('cart_abandonments', JSON.stringify(abandonments));\n        \n        // Send to analytics\n        this.sendFunnelAnalytics('cart_abandoned', abandonmentData);\n        \n        console.log('Cart abandonment recorded:', abandonmentData);\n    }\n    \n    /**\n     * Setup personalized offers\n     */\n    setupPersonalizedOffers() {\n        // Load user behavior data\n        this.analyzeUserBehavior();\n        \n        // Setup dynamic pricing\n        this.setupDynamicPricing();\n        \n        // Setup product recommendations\n        this.setupRecommendations();\n    }\n    \n    /**\n     * Analyze user behavior for personalization\n     */\n    analyzeUserBehavior() {\n        const userHistory = JSON.parse(localStorage.getItem('user_behavior') || '{}');\n        const abandonments = JSON.parse(localStorage.getItem('cart_abandonments') || '[]');\n        \n        // Determine user segment\n        let segment = 'new_visitor';\n        \n        if (userHistory.visits > 5) {\n            if (userHistory.purchases > 0) {\n                segment = 'returning_customer';\n            } else if (abandonments.length > 2) {\n                segment = 'high_intent_non_buyer';\n            } else {\n                segment = 'browser';\n            }\n        }\n        \n        // Price sensitivity analysis\n        let priceSensitivity = 'medium';\n        if (abandonments.length > 0) {\n            const avgAbandonmentValue = abandonments.reduce((sum, a) => sum + a.cartValue, 0) / abandonments.length;\n            if (avgAbandonmentValue < 5000) {\n                priceSensitivity = 'high';\n            } else if (avgAbandonmentValue > 15000) {\n                priceSensitivity = 'low';\n            }\n        }\n        \n        this.sessionData.userSegment = segment;\n        this.sessionData.priceSensitivity = priceSensitivity;\n        \n        console.log(`User classified as: ${segment} with ${priceSensitivity} price sensitivity`);\n    }\n    \n    /**\n     * Show retention offer based on context\n     */\n    showRetentionOffer(step) {\n        const cart = this.getCartData();\n        if (!cart || cart.items.length === 0) return;\n        \n        const offer = this.generatePersonalizedOffer(step, cart);\n        if (offer) {\n            this.displayRetentionModal(offer);\n        }\n    }\n    \n    /**\n     * Generate personalized offer\n     */\n    generatePersonalizedOffer(step, cart) {\n        const segment = this.sessionData.userSegment;\n        const priceSensitivity = this.sessionData.priceSensitivity;\n        const cartValue = cart.total;\n        \n        let offer = null;\n        \n        // High price sensitivity offers\n        if (priceSensitivity === 'high') {\n            if (cartValue > 8000) {\n                offer = {\n                    type: 'discount',\n                    value: 15,\n                    title: '¡Espera! 15% de descuento',\n                    message: 'Obtén un 15% de descuento en tu pedido. ¡Oferta por tiempo limitado!',\n                    code: 'SAVE15NOW',\n                    urgency: '⏰ Solo por los próximos 10 minutos'\n                };\n            } else {\n                offer = {\n                    type: 'free_shipping',\n                    title: '¡Envío gratis para ti!',\n                    message: 'Completa tu pedido ahora y obtén envío gratuito.',\n                    urgency: '🚚 Oferta especial por abandono'\n                };\n            }\n        }\n        \n        // Medium price sensitivity\n        else if (priceSensitivity === 'medium') {\n            if (step === 'checkout_start' || step === 'checkout_info') {\n                offer = {\n                    type: 'guarantee',\n                    title: 'Compra 100% segura',\n                    message: 'Garantía de devolución de 30 días + Envío asegurado',\n                    features: ['🛡️ Compra protegida', '📦 Envío asegurado', '↩️ Devolución fácil']\n                };\n            } else {\n                offer = {\n                    type: 'upgrade',\n                    title: 'Mejora tu experiencia',\n                    message: 'Agrega productos complementarios con 10% de descuento',\n                    recommendations: this.getComplementaryProducts(cart.items)\n                };\n            }\n        }\n        \n        // Low price sensitivity (premium customers)\n        else {\n            offer = {\n                type: 'premium',\n                title: 'Experiencia VIP',\n                message: 'Acceso prioritario + Soporte premium + Envío express gratuito',\n                features: ['⚡ Procesamiento prioritario', '🎧 Soporte VIP', '🚀 Envío express gratis']\n            };\n        }\n        \n        // Add urgency for browsers\n        if (segment === 'browser') {\n            if (offer) {\n                offer.urgency = '⚠️ Esta oferta expira cuando cierres la página';\n            }\n        }\n        \n        return offer;\n    }\n    \n    /**\n     * Display retention modal\n     */\n    displayRetentionModal(offer) {\n        // Check if modal already shown in this session\n        if (sessionStorage.getItem('retention_modal_shown')) {\n            return;\n        }\n        \n        const modal = this.createRetentionModal(offer);\n        document.body.appendChild(modal);\n        \n        // Show modal with animation\n        setTimeout(() => {\n            modal.classList.add('show');\n        }, 100);\n        \n        // Mark as shown\n        sessionStorage.setItem('retention_modal_shown', 'true');\n        \n        // Track modal display\n        this.sendFunnelAnalytics('retention_offer_shown', {\n            offerType: offer.type,\n            step: this.sessionData.currentStep\n        });\n    }\n    \n    /**\n     * Create retention modal HTML\n     */\n    createRetentionModal(offer) {\n        const modal = document.createElement('div');\n        modal.className = 'retention-modal-overlay';\n        modal.innerHTML = `\n            <div class=\"retention-modal\">\n                <div class=\"retention-header\">\n                    <h3>${offer.title}</h3>\n                    <button class=\"retention-close\" onclick=\"this.closest('.retention-modal-overlay').remove()\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n                <div class=\"retention-body\">\n                    <p class=\"retention-message\">${offer.message}</p>\n                    ${offer.urgency ? `<p class=\"retention-urgency\">${offer.urgency}</p>` : ''}\n                    ${offer.features ? `\n                        <ul class=\"retention-features\">\n                            ${offer.features.map(feature => `<li>${feature}</li>`).join('')}\n                        </ul>\n                    ` : ''}\n                    ${offer.code ? `\n                        <div class=\"retention-code\">\n                            <span>Código:</span>\n                            <strong>${offer.code}</strong>\n                            <button onclick=\"navigator.clipboard.writeText('${offer.code}')\" class=\"copy-code\">\n                                <i class=\"fas fa-copy\"></i>\n                            </button>\n                        </div>\n                    ` : ''}\n                </div>\n                <div class=\"retention-actions\">\n                    <button class=\"btn btn-primary retention-accept\" onclick=\"${this.getAcceptAction(offer)}\">\n                        ${this.getAcceptText(offer)}\n                    </button>\n                    <button class=\"btn btn-secondary retention-decline\" onclick=\"this.closest('.retention-modal-overlay').remove()\">\n                        No, gracias\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        // Add styles\n        const style = document.createElement('style');\n        style.textContent = `\n            .retention-modal-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.8);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10000;\n                opacity: 0;\n                transition: opacity 0.3s ease;\n            }\n            \n            .retention-modal-overlay.show {\n                opacity: 1;\n            }\n            \n            .retention-modal {\n                background: white;\n                border-radius: 12px;\n                max-width: 500px;\n                width: 90%;\n                max-height: 80vh;\n                overflow-y: auto;\n                transform: translateY(20px);\n                transition: transform 0.3s ease;\n            }\n            \n            .retention-modal-overlay.show .retention-modal {\n                transform: translateY(0);\n            }\n            \n            .retention-header {\n                padding: 1.5rem;\n                border-bottom: 1px solid #e5e7eb;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n            \n            .retention-header h3 {\n                margin: 0;\n                color: var(--fractal-primary);\n                font-size: 1.25rem;\n                font-weight: 700;\n            }\n            \n            .retention-close {\n                background: none;\n                border: none;\n                font-size: 1.5rem;\n                cursor: pointer;\n                padding: 0.5rem;\n                border-radius: 4px;\n                color: #6b7280;\n            }\n            \n            .retention-body {\n                padding: 1.5rem;\n            }\n            \n            .retention-message {\n                font-size: 1rem;\n                color: #374151;\n                margin-bottom: 1rem;\n                line-height: 1.5;\n            }\n            \n            .retention-urgency {\n                background: #fef3c7;\n                color: #92400e;\n                padding: 0.75rem;\n                border-radius: 6px;\n                font-weight: 600;\n                margin-bottom: 1rem;\n                border-left: 4px solid #f59e0b;\n            }\n            \n            .retention-features {\n                list-style: none;\n                padding: 0;\n                margin: 1rem 0;\n            }\n            \n            .retention-features li {\n                padding: 0.5rem 0;\n                font-size: 0.95rem;\n                color: #374151;\n            }\n            \n            .retention-code {\n                background: #f3f4f6;\n                padding: 1rem;\n                border-radius: 6px;\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n                margin: 1rem 0;\n            }\n            \n            .retention-code strong {\n                background: var(--fractal-primary);\n                color: white;\n                padding: 0.25rem 0.5rem;\n                border-radius: 4px;\n                font-family: monospace;\n            }\n            \n            .copy-code {\n                background: none;\n                border: 1px solid #d1d5db;\n                padding: 0.25rem 0.5rem;\n                border-radius: 4px;\n                cursor: pointer;\n            }\n            \n            .retention-actions {\n                padding: 1.5rem;\n                border-top: 1px solid #e5e7eb;\n                display: flex;\n                gap: 1rem;\n            }\n            \n            .retention-actions .btn {\n                flex: 1;\n                padding: 0.75rem 1.5rem;\n                border-radius: 6px;\n                font-weight: 600;\n                border: none;\n                cursor: pointer;\n                transition: all 0.2s;\n            }\n            \n            .retention-accept {\n                background: var(--fractal-primary);\n                color: white;\n            }\n            \n            .retention-accept:hover {\n                background: color-mix(in srgb, var(--fractal-primary) 90%, black);\n                transform: translateY(-1px);\n            }\n            \n            .retention-decline {\n                background: #f3f4f6;\n                color: #374151;\n            }\n            \n            .retention-decline:hover {\n                background: #e5e7eb;\n            }\n        `;\n        \n        document.head.appendChild(style);\n        \n        return modal;\n    }\n    \n    /**\n     * Get accept action for offer\n     */\n    getAcceptAction(offer) {\n        switch (offer.type) {\n            case 'discount':\n                return `window.ConversionFunnel.applyDiscount('${offer.code}'); this.closest('.retention-modal-overlay').remove();`;\n            case 'free_shipping':\n                return `window.ConversionFunnel.applyFreeShipping(); this.closest('.retention-modal-overlay').remove();`;\n            default:\n                return `window.ConversionFunnel.acceptOffer('${offer.type}'); this.closest('.retention-modal-overlay').remove();`;\n        }\n    }\n    \n    /**\n     * Get accept button text\n     */\n    getAcceptText(offer) {\n        switch (offer.type) {\n            case 'discount':\n                return 'Aplicar descuento';\n            case 'free_shipping':\n                return 'Obtener envío gratis';\n            case 'guarantee':\n                return 'Continuar con garantía';\n            case 'upgrade':\n                return 'Ver productos';\n            case 'premium':\n                return 'Activar experiencia VIP';\n            default:\n                return 'Aceptar oferta';\n        }\n    }\n    \n    /**\n     * Apply discount code\n     */\n    applyDiscount(code) {\n        // Trigger discount application\n        const event = new CustomEvent('applyDiscountCode', {\n            detail: { code: code }\n        });\n        document.dispatchEvent(event);\n        \n        // Track acceptance\n        this.sendFunnelAnalytics('retention_offer_accepted', {\n            offerType: 'discount',\n            code: code\n        });\n    }\n    \n    /**\n     * Apply free shipping\n     */\n    applyFreeShipping() {\n        // Trigger free shipping\n        const event = new CustomEvent('applyFreeShipping');\n        document.dispatchEvent(event);\n        \n        // Track acceptance\n        this.sendFunnelAnalytics('retention_offer_accepted', {\n            offerType: 'free_shipping'\n        });\n    }\n    \n    /**\n     * Accept generic offer\n     */\n    acceptOffer(type) {\n        // Track acceptance\n        this.sendFunnelAnalytics('retention_offer_accepted', {\n            offerType: type\n        });\n        \n        // Show success message\n        this.showOfferSuccessMessage(type);\n    }\n    \n    /**\n     * Setup urgency triggers\n     */\n    setupUrgencyTriggers() {\n        // Stock level urgency\n        this.setupStockUrgency();\n        \n        // Time-based urgency\n        this.setupTimeUrgency();\n        \n        // Social proof urgency\n        this.setupSocialProofUrgency();\n    }\n    \n    /**\n     * Setup stock urgency indicators\n     */\n    setupStockUrgency() {\n        const productCards = document.querySelectorAll('.product-card');\n        \n        productCards.forEach(card => {\n            const stock = this.getProductStock(card);\n            if (stock !== null && stock <= 5 && stock > 0) {\n                this.addStockUrgencyBadge(card, stock);\n            }\n        });\n    }\n    \n    /**\n     * Add stock urgency badge\n     */\n    addStockUrgencyBadge(card, stock) {\n        const badge = document.createElement('div');\n        badge.className = 'urgency-badge stock-urgency';\n        badge.innerHTML = `⚠️ Solo ${stock} disponibles`;\n        \n        const imageContainer = card.querySelector('.product-image, .product-card__image');\n        if (imageContainer) {\n            imageContainer.appendChild(badge);\n        }\n    }\n    \n    /**\n     * Get product stock from data attributes or API\n     */\n    getProductStock(card) {\n        const stockAttr = card.getAttribute('data-stock');\n        if (stockAttr) {\n            return parseInt(stockAttr);\n        }\n        \n        // Simulate stock levels for demo\n        return Math.floor(Math.random() * 10) + 1;\n    }\n    \n    /**\n     * Setup email recovery sequences\n     */\n    setupEmailRecovery() {\n        // Check for abandoned cart recovery\n        this.checkEmailRecoveryEligibility();\n    }\n    \n    /**\n     * Schedule email recovery sequence\n     */\n    scheduleEmailRecovery() {\n        const cart = this.getCartData();\n        const userEmail = this.getUserEmail();\n        \n        if (!cart || !userEmail || cart.items.length === 0) {\n            return;\n        }\n        \n        const recoveryData = {\n            email: userEmail,\n            cartData: cart,\n            abandonmentTime: Date.now(),\n            sessionData: this.sessionData,\n            userSegment: this.sessionData.userSegment\n        };\n        \n        // Send to backend for email sequence\n        this.sendEmailRecoveryData(recoveryData);\n    }\n    \n    /**\n     * Send email recovery data to backend\n     */\n    sendEmailRecoveryData(data) {\n        fetch('/api/email/cart-recovery', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).catch(error => {\n            console.warn('Failed to schedule email recovery:', error);\n        });\n    }\n    \n    /**\n     * Get user email from form or localStorage\n     */\n    getUserEmail() {\n        // Check checkout form\n        const emailInput = document.querySelector('input[type=\"email\"]');\n        if (emailInput && emailInput.value) {\n            return emailInput.value;\n        }\n        \n        // Check localStorage\n        return localStorage.getItem('user_email');\n    }\n    \n    /**\n     * Get current cart data\n     */\n    getCartData() {\n        const cartData = localStorage.getItem('cart');\n        if (cartData) {\n            try {\n                return JSON.parse(cartData);\n            } catch (error) {\n                console.warn('Failed to parse cart data:', error);\n            }\n        }\n        return null;\n    }\n    \n    /**\n     * Track page view for funnel\n     */\n    trackPageView() {\n        const path = window.location.pathname;\n        let step = 'product_view'; // Default\n        \n        if (path.includes('product-detail')) {\n            step = 'product_view';\n        } else if (path.includes('cart')) {\n            step = 'cart_view';\n        } else if (path.includes('checkout')) {\n            if (path.includes('shipping')) {\n                step = 'checkout_shipping';\n            } else if (path.includes('payment')) {\n                step = 'checkout_payment';\n            } else {\n                step = 'checkout_start';\n            }\n        } else if (path.includes('thank-you') || path.includes('success')) {\n            step = 'purchase_complete';\n        }\n        \n        this.trackFunnelStep(step, { page: path });\n    }\n    \n    /**\n     * Initialize funnel tracking\n     */\n    initializeFunnelTracking() {\n        // Track initial page view\n        this.trackPageView();\n        \n        // Setup form tracking\n        this.setupFormTracking();\n        \n        // Setup click tracking\n        this.setupClickTracking();\n    }\n    \n    /**\n     * Setup form tracking for checkout steps\n     */\n    setupFormTracking() {\n        const forms = document.querySelectorAll('form');\n        \n        forms.forEach(form => {\n            // Track form step completion\n            form.addEventListener('submit', (e) => {\n                const formClass = form.className;\n                \n                if (formClass.includes('checkout-info')) {\n                    this.trackFunnelStep('checkout_info');\n                } else if (formClass.includes('checkout-shipping')) {\n                    this.trackFunnelStep('checkout_shipping');\n                } else if (formClass.includes('checkout-payment')) {\n                    this.trackFunnelStep('checkout_payment');\n                }\n            });\n            \n            // Track form abandonment\n            const inputs = form.querySelectorAll('input, select, textarea');\n            inputs.forEach(input => {\n                input.addEventListener('blur', () => {\n                    this.trackFormProgress(form);\n                });\n            });\n        });\n    }\n    \n    /**\n     * Track form completion progress\n     */\n    trackFormProgress(form) {\n        const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');\n        const completed = Array.from(inputs).filter(input => input.value.trim() !== '').length;\n        const total = inputs.length;\n        const progress = total > 0 ? (completed / total) * 100 : 0;\n        \n        this.sendFunnelAnalytics('form_progress', {\n            formId: form.id || form.className,\n            progress: progress,\n            completedFields: completed,\n            totalFields: total\n        });\n    }\n    \n    /**\n     * Setup click tracking\n     */\n    setupClickTracking() {\n        document.addEventListener('click', (e) => {\n            const target = e.target;\n            \n            // Track CTA clicks\n            if (target.closest('.cta-button, .add-to-cart-btn')) {\n                this.sendFunnelAnalytics('cta_click', {\n                    element: target.textContent,\n                    position: this.getElementPosition(target)\n                });\n            }\n            \n            // Track navigation clicks\n            if (target.closest('a')) {\n                const link = target.closest('a');\n                this.sendFunnelAnalytics('navigation_click', {\n                    href: link.href,\n                    text: link.textContent\n                });\n            }\n        });\n    }\n    \n    /**\n     * Get element position on page\n     */\n    getElementPosition(element) {\n        const rect = element.getBoundingClientRect();\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        \n        return {\n            x: rect.left,\n            y: rect.top + scrollTop,\n            viewport: {\n                x: rect.left,\n                y: rect.top\n            }\n        };\n    }\n    \n    /**\n     * Send funnel analytics to backend\n     */\n    sendFunnelAnalytics(event, data) {\n        const analyticsData = {\n            event: event,\n            data: data,\n            sessionId: this.sessionData.sessionId,\n            userId: this.sessionData.userId,\n            timestamp: Date.now(),\n            url: window.location.href,\n            referrer: document.referrer,\n            userAgent: navigator.userAgent\n        };\n        \n        // Send to analytics API\n        fetch('/api/analytics/funnel', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(analyticsData)\n        }).catch(error => {\n            console.warn('Failed to send funnel analytics:', error);\n            \n            // Store locally as backup\n            const stored = JSON.parse(localStorage.getItem('funnel_analytics') || '[]');\n            stored.push(analyticsData);\n            \n            // Keep only last 50 events\n            if (stored.length > 50) {\n                stored.splice(0, stored.length - 50);\n            }\n            \n            localStorage.setItem('funnel_analytics', JSON.stringify(stored));\n        });\n    }\n    \n    /**\n     * Save session data\n     */\n    saveSessionData() {\n        sessionStorage.setItem('conversionFunnel', JSON.stringify(this.sessionData));\n    }\n    \n    /**\n     * Check optimization triggers\n     */\n    checkOptimizationTriggers(step) {\n        // Time-based triggers\n        const timeInFunnel = Date.now() - this.sessionData.startTime;\n        \n        // Show urgency after 2 minutes in checkout\n        if (step.includes('checkout') && timeInFunnel > 120000) {\n            this.showTimeUrgency();\n        }\n        \n        // Show social proof after 30 seconds on product page\n        if (step === 'product_view' && timeInFunnel > 30000) {\n            this.showSocialProof();\n        }\n    }\n    \n    /**\n     * Show time-based urgency\n     */\n    showTimeUrgency() {\n        if (document.querySelector('.time-urgency')) return;\n        \n        const urgencyBanner = document.createElement('div');\n        urgencyBanner.className = 'time-urgency urgency-banner';\n        urgencyBanner.innerHTML = `\n            <div class=\"urgency-content\">\n                <span class=\"urgency-icon\">⏰</span>\n                <span class=\"urgency-text\">¡Completa tu pedido en los próximos 10 minutos y obtén envío express gratis!</span>\n                <button class=\"urgency-close\" onclick=\"this.parentElement.parentElement.remove()\">\n                    <i class=\"fas fa-times\"></i>\n                </button>\n            </div>\n        `;\n        \n        document.body.appendChild(urgencyBanner);\n        \n        // Auto-remove after 30 seconds\n        setTimeout(() => {\n            if (urgencyBanner.parentElement) {\n                urgencyBanner.remove();\n            }\n        }, 30000);\n    }\n    \n    /**\n     * Show social proof\n     */\n    showSocialProof() {\n        if (document.querySelector('.social-proof-popup')) return;\n        \n        const socialProof = document.createElement('div');\n        socialProof.className = 'social-proof-popup';\n        socialProof.innerHTML = `\n            <div class=\"social-proof-content\">\n                <div class=\"social-proof-avatar\">👤</div>\n                <div class=\"social-proof-text\">\n                    <strong>María de Buenos Aires</strong> compró esto hace 5 minutos\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(socialProof);\n        \n        // Show animation\n        setTimeout(() => {\n            socialProof.classList.add('show');\n        }, 100);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            socialProof.classList.remove('show');\n            setTimeout(() => {\n                if (socialProof.parentElement) {\n                    socialProof.remove();\n                }\n            }, 300);\n        }, 5000);\n    }\n    \n    /**\n     * Get funnel analytics summary\n     */\n    getFunnelSummary() {\n        return {\n            sessionId: this.sessionData.sessionId,\n            currentStep: this.sessionData.currentStep,\n            timeInFunnel: Date.now() - this.sessionData.startTime,\n            previousSteps: this.sessionData.previousSteps,\n            userSegment: this.sessionData.userSegment,\n            priceSensitivity: this.sessionData.priceSensitivity,\n            exitIntent: this.exitIntent,\n            abandonmentReasons: this.sessionData.abandonmentReasons\n        };\n    }\n}\n\n// Auto-initialize conversion funnel optimizer\nlet conversionFunnelOptimizer;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    conversionFunnelOptimizer = new ConversionFunnelOptimizer();\n    \n    // Expose globally\n    window.ConversionFunnel = conversionFunnelOptimizer;\n});\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = ConversionFunnelOptimizer;\n}