/**\n * FractalMerch Accessibility Manager\n * WCAG 2.1 AA compliance utilities and enhancements\n */\n\nclass AccessibilityManager {\n    constructor() {\n        this.focusTrap = null;\n        this.announcements = [];\n        this.keyboardNavigation = true;\n        \n        this.init();\n    }\n    \n    init() {\n        this.setupKeyboardNavigation();\n        this.setupFocusTrap();\n        this.setupScreenReaderAnnouncements();\n        this.setupSkipLinks();\n        this.setupFormValidation();\n        this.setupModalAccessibility();\n        this.setupImageAltText();\n        this.enhanceInteractiveElements();\n        this.setupColorContrastToggle();\n        this.setupReducedMotion();\n    }\n    \n    /**\n     * Setup keyboard navigation\n     */\n    setupKeyboardNavigation() {\n        // Handle Escape key globally\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.handleEscapeKey(e);\n            }\n            \n            // Handle Tab navigation\n            if (e.key === 'Tab') {\n                this.handleTabNavigation(e);\n            }\n            \n            // Handle Enter and Space for custom buttons\n            if (e.key === 'Enter' || e.key === ' ') {\n                this.handleActivationKeys(e);\n            }\n            \n            // Handle Arrow keys for custom components\n            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n                this.handleArrowKeys(e);\n            }\n        });\n        \n        // Track if user is navigating with keyboard\n        document.addEventListener('keydown', () => {\n            this.keyboardNavigation = true;\n            document.body.classList.add('keyboard-navigation');\n        });\n        \n        document.addEventListener('mousedown', () => {\n            this.keyboardNavigation = false;\n            document.body.classList.remove('keyboard-navigation');\n        });\n    }\n    \n    /**\n     * Handle Escape key press\n     */\n    handleEscapeKey(e) {\n        // Close modals\n        const openModal = document.querySelector('.modal[aria-hidden=\"false\"]');\n        if (openModal) {\n            this.closeModal(openModal);\n            e.preventDefault();\n            return;\n        }\n        \n        // Close dropdowns\n        const openDropdown = document.querySelector('.dropdown[aria-expanded=\"true\"]');\n        if (openDropdown) {\n            this.closeDropdown(openDropdown);\n            e.preventDefault();\n            return;\n        }\n        \n        // Clear search\n        const searchInput = document.querySelector('.search-input:focus');\n        if (searchInput && searchInput.value) {\n            searchInput.value = '';\n            searchInput.dispatchEvent(new Event('input'));\n            e.preventDefault();\n        }\n    }\n    \n    /**\n     * Handle Tab navigation\n     */\n    handleTabNavigation(e) {\n        const focusableElements = this.getFocusableElements();\n        const currentIndex = focusableElements.indexOf(document.activeElement);\n        \n        if (e.shiftKey) {\n            // Shift + Tab (backward)\n            if (currentIndex === 0) {\n                e.preventDefault();\n                focusableElements[focusableElements.length - 1].focus();\n            }\n        } else {\n            // Tab (forward)\n            if (currentIndex === focusableElements.length - 1) {\n                e.preventDefault();\n                focusableElements[0].focus();\n            }\n        }\n    }\n    \n    /**\n     * Handle Enter and Space activation\n     */\n    handleActivationKeys(e) {\n        const target = e.target;\n        \n        // Handle custom buttons (elements with role=\"button\")\n        if (target.getAttribute('role') === 'button' && !target.disabled) {\n            e.preventDefault();\n            target.click();\n        }\n        \n        // Handle expandable elements\n        if (target.hasAttribute('aria-expanded')) {\n            e.preventDefault();\n            this.toggleExpanded(target);\n        }\n    }\n    \n    /**\n     * Handle arrow key navigation\n     */\n    handleArrowKeys(e) {\n        const target = e.target;\n        const parent = target.closest('[role=\"menubar\"], [role=\"menu\"], [role=\"listbox\"], [role=\"tablist\"]');\n        \n        if (parent) {\n            e.preventDefault();\n            this.navigateWithArrows(parent, e.key, target);\n        }\n    }\n    \n    /**\n     * Navigate with arrow keys within a container\n     */\n    navigateWithArrows(container, key, currentElement) {\n        const role = container.getAttribute('role');\n        let selector;\n        \n        switch (role) {\n            case 'menubar':\n            case 'menu':\n                selector = '[role=\"menuitem\"]';\n                break;\n            case 'listbox':\n                selector = '[role=\"option\"]';\n                break;\n            case 'tablist':\n                selector = '[role=\"tab\"]';\n                break;\n            default:\n                return;\n        }\n        \n        const items = Array.from(container.querySelectorAll(selector));\n        const currentIndex = items.indexOf(currentElement);\n        let nextIndex;\n        \n        if (key === 'ArrowDown' || key === 'ArrowRight') {\n            nextIndex = (currentIndex + 1) % items.length;\n        } else if (key === 'ArrowUp' || key === 'ArrowLeft') {\n            nextIndex = (currentIndex - 1 + items.length) % items.length;\n        }\n        \n        if (nextIndex !== undefined) {\n            items[nextIndex].focus();\n            \n            // For tab navigation, also activate the tab\n            if (role === 'tablist') {\n                items[nextIndex].click();\n            }\n        }\n    }\n    \n    /**\n     * Get all focusable elements\n     */\n    getFocusableElements() {\n        const selector = [\n            'a[href]',\n            'button:not([disabled])',\n            'input:not([disabled])',\n            'select:not([disabled])',\n            'textarea:not([disabled])',\n            '[tabindex]:not([tabindex=\"-1\"])',\n            '[role=\"button\"]:not([disabled])'\n        ].join(', ');\n        \n        return Array.from(document.querySelectorAll(selector))\n            .filter(el => this.isVisible(el));\n    }\n    \n    /**\n     * Check if element is visible\n     */\n    isVisible(element) {\n        return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n    }\n    \n    /**\n     * Setup focus trap for modals\n     */\n    setupFocusTrap() {\n        this.focusTrap = {\n            active: false,\n            container: null,\n            firstFocusable: null,\n            lastFocusable: null,\n            previousFocus: null\n        };\n    }\n    \n    /**\n     * Activate focus trap\n     */\n    activateFocusTrap(container) {\n        this.focusTrap.previousFocus = document.activeElement;\n        this.focusTrap.container = container;\n        this.focusTrap.active = true;\n        \n        const focusableElements = container.querySelectorAll(\n            'a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n        );\n        \n        this.focusTrap.firstFocusable = focusableElements[0];\n        this.focusTrap.lastFocusable = focusableElements[focusableElements.length - 1];\n        \n        // Focus first element\n        if (this.focusTrap.firstFocusable) {\n            this.focusTrap.firstFocusable.focus();\n        }\n        \n        // Add event listener for Tab trapping\n        document.addEventListener('keydown', this.trapFocus.bind(this));\n    }\n    \n    /**\n     * Deactivate focus trap\n     */\n    deactivateFocusTrap() {\n        this.focusTrap.active = false;\n        document.removeEventListener('keydown', this.trapFocus.bind(this));\n        \n        // Return focus to previous element\n        if (this.focusTrap.previousFocus) {\n            this.focusTrap.previousFocus.focus();\n        }\n        \n        this.focusTrap.container = null;\n        this.focusTrap.firstFocusable = null;\n        this.focusTrap.lastFocusable = null;\n        this.focusTrap.previousFocus = null;\n    }\n    \n    /**\n     * Trap focus within container\n     */\n    trapFocus(e) {\n        if (!this.focusTrap.active || e.key !== 'Tab') return;\n        \n        if (e.shiftKey) {\n            // Shift + Tab\n            if (document.activeElement === this.focusTrap.firstFocusable) {\n                e.preventDefault();\n                this.focusTrap.lastFocusable.focus();\n            }\n        } else {\n            // Tab\n            if (document.activeElement === this.focusTrap.lastFocusable) {\n                e.preventDefault();\n                this.focusTrap.firstFocusable.focus();\n            }\n        }\n    }\n    \n    /**\n     * Setup screen reader announcements\n     */\n    setupScreenReaderAnnouncements() {\n        // Create ARIA live region\n        this.createLiveRegion();\n        \n        // Setup automatic announcements for dynamic content\n        this.setupDynamicAnnouncements();\n    }\n    \n    /**\n     * Create ARIA live region for announcements\n     */\n    createLiveRegion() {\n        const liveRegion = document.createElement('div');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.className = 'sr-only';\n        liveRegion.id = 'aria-live-region';\n        document.body.appendChild(liveRegion);\n        \n        // Create assertive live region for urgent announcements\n        const assertiveRegion = document.createElement('div');\n        assertiveRegion.setAttribute('aria-live', 'assertive');\n        assertiveRegion.setAttribute('aria-atomic', 'true');\n        assertiveRegion.className = 'sr-only';\n        assertiveRegion.id = 'aria-live-assertive';\n        document.body.appendChild(assertiveRegion);\n    }\n    \n    /**\n     * Announce message to screen readers\n     */\n    announce(message, priority = 'polite') {\n        const regionId = priority === 'assertive' ? 'aria-live-assertive' : 'aria-live-region';\n        const region = document.getElementById(regionId);\n        \n        if (region) {\n            // Clear previous message\n            region.textContent = '';\n            \n            // Add new message after a brief delay\n            setTimeout(() => {\n                region.textContent = message;\n            }, 100);\n            \n            // Clear message after it's been announced\n            setTimeout(() => {\n                region.textContent = '';\n            }, 3000);\n        }\n    }\n    \n    /**\n     * Setup automatic announcements for dynamic content\n     */\n    setupDynamicAnnouncements() {\n        // Announce page changes\n        this.announcePageChanges();\n        \n        // Announce form validation\n        this.announceFormValidation();\n        \n        // Announce loading states\n        this.announceLoadingStates();\n        \n        // Announce cart updates\n        this.announceCartUpdates();\n    }\n    \n    /**\n     * Announce page changes\n     */\n    announcePageChanges() {\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n                    mutation.addedNodes.forEach((node) => {\n                        if (node.nodeType === Node.ELEMENT_NODE) {\n                            const announcement = node.getAttribute('data-announce');\n                            if (announcement) {\n                                this.announce(announcement);\n                            }\n                        }\n                    });\n                }\n            });\n        });\n        \n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n    \n    /**\n     * Announce form validation\n     */\n    announceFormValidation() {\n        document.addEventListener('invalid', (e) => {\n            const input = e.target;\n            const label = this.getAssociatedLabel(input);\n            const labelText = label ? label.textContent : input.getAttribute('aria-label') || 'Field';\n            \n            this.announce(`${labelText} is invalid: ${input.validationMessage}`, 'assertive');\n        });\n        \n        document.addEventListener('input', (e) => {\n            const input = e.target;\n            if (input.hasAttribute('aria-invalid') && input.validity.valid) {\n                input.setAttribute('aria-invalid', 'false');\n                const label = this.getAssociatedLabel(input);\n                const labelText = label ? label.textContent : 'Field';\n                this.announce(`${labelText} is now valid`);\n            }\n        });\n    }\n    \n    /**\n     * Get associated label for form input\n     */\n    getAssociatedLabel(input) {\n        // Check for explicit label association\n        if (input.id) {\n            const label = document.querySelector(`label[for=\"${input.id}\"]`);\n            if (label) return label;\n        }\n        \n        // Check for wrapping label\n        const wrappingLabel = input.closest('label');\n        if (wrappingLabel) return wrappingLabel;\n        \n        // Check for aria-labelledby\n        const labelledBy = input.getAttribute('aria-labelledby');\n        if (labelledBy) {\n            return document.getElementById(labelledBy);\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Announce loading states\n     */\n    announceLoadingStates() {\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'attributes' && mutation.attributeName === 'aria-busy') {\n                    const element = mutation.target;\n                    const isBusy = element.getAttribute('aria-busy') === 'true';\n                    \n                    if (isBusy) {\n                        this.announce('Loading content...');\n                    } else {\n                        this.announce('Content loaded');\n                    }\n                }\n            });\n        });\n        \n        observer.observe(document.body, {\n            attributes: true,\n            subtree: true,\n            attributeFilter: ['aria-busy']\n        });\n    }\n    \n    /**\n     * Announce cart updates\n     */\n    announceCartUpdates() {\n        // Listen for cart update events\n        document.addEventListener('cartUpdated', (e) => {\n            const { action, product, quantity } = e.detail;\n            let message;\n            \n            switch (action) {\n                case 'add':\n                    message = `${product} added to cart. Quantity: ${quantity}`;\n                    break;\n                case 'remove':\n                    message = `${product} removed from cart`;\n                    break;\n                case 'update':\n                    message = `${product} quantity updated to ${quantity}`;\n                    break;\n                default:\n                    message = 'Cart updated';\n            }\n            \n            this.announce(message);\n        });\n    }\n    \n    /**\n     * Setup skip links\n     */\n    setupSkipLinks() {\n        // Create skip to main content link\n        const skipLink = document.createElement('a');\n        skipLink.href = '#main-content';\n        skipLink.textContent = 'Skip to main content';\n        skipLink.className = 'skip-to-content';\n        \n        document.body.insertBefore(skipLink, document.body.firstChild);\n        \n        // Ensure main content has the correct ID\n        let mainContent = document.getElementById('main-content');\n        if (!mainContent) {\n            mainContent = document.querySelector('main, .main-content, #content');\n            if (mainContent) {\n                mainContent.id = 'main-content';\n                mainContent.setAttribute('tabindex', '-1');\n            }\n        }\n        \n        // Handle skip link click\n        skipLink.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (mainContent) {\n                mainContent.focus();\n                mainContent.scrollIntoView();\n            }\n        });\n    }\n    \n    /**\n     * Setup form validation\n     */\n    setupFormValidation() {\n        const forms = document.querySelectorAll('form');\n        \n        forms.forEach(form => {\n            // Add novalidate to prevent browser validation\n            form.setAttribute('novalidate', 'true');\n            \n            // Setup custom validation\n            this.setupCustomValidation(form);\n        });\n    }\n    \n    /**\n     * Setup custom form validation\n     */\n    setupCustomValidation(form) {\n        const inputs = form.querySelectorAll('input, select, textarea');\n        \n        inputs.forEach(input => {\n            // Add ARIA attributes\n            this.setupInputAria(input);\n            \n            // Add validation listeners\n            input.addEventListener('blur', () => this.validateInput(input));\n            input.addEventListener('input', () => this.clearValidationError(input));\n        });\n        \n        // Validate on submit\n        form.addEventListener('submit', (e) => {\n            if (!this.validateForm(form)) {\n                e.preventDefault();\n                this.focusFirstInvalidField(form);\n            }\n        });\n    }\n    \n    /**\n     * Setup input ARIA attributes\n     */\n    setupInputAria(input) {\n        // Add aria-required for required fields\n        if (input.hasAttribute('required')) {\n            input.setAttribute('aria-required', 'true');\n        }\n        \n        // Create error message container\n        const errorId = input.id + '-error';\n        let errorContainer = document.getElementById(errorId);\n        \n        if (!errorContainer) {\n            errorContainer = document.createElement('div');\n            errorContainer.id = errorId;\n            errorContainer.className = 'error-message';\n            errorContainer.setAttribute('aria-live', 'polite');\n            input.parentNode.appendChild(errorContainer);\n        }\n        \n        input.setAttribute('aria-describedby', errorId);\n    }\n    \n    /**\n     * Validate individual input\n     */\n    validateInput(input) {\n        const isValid = input.validity.valid;\n        const errorContainer = document.getElementById(input.id + '-error');\n        \n        if (!isValid) {\n            input.setAttribute('aria-invalid', 'true');\n            if (errorContainer) {\n                errorContainer.textContent = input.validationMessage;\n            }\n            input.classList.add('invalid');\n        } else {\n            input.setAttribute('aria-invalid', 'false');\n            if (errorContainer) {\n                errorContainer.textContent = '';\n            }\n            input.classList.remove('invalid');\n        }\n        \n        return isValid;\n    }\n    \n    /**\n     * Clear validation error\n     */\n    clearValidationError(input) {\n        if (input.validity.valid) {\n            input.setAttribute('aria-invalid', 'false');\n            const errorContainer = document.getElementById(input.id + '-error');\n            if (errorContainer) {\n                errorContainer.textContent = '';\n            }\n            input.classList.remove('invalid');\n        }\n    }\n    \n    /**\n     * Validate entire form\n     */\n    validateForm(form) {\n        const inputs = form.querySelectorAll('input, select, textarea');\n        let isValid = true;\n        \n        inputs.forEach(input => {\n            if (!this.validateInput(input)) {\n                isValid = false;\n            }\n        });\n        \n        return isValid;\n    }\n    \n    /**\n     * Focus first invalid field\n     */\n    focusFirstInvalidField(form) {\n        const firstInvalid = form.querySelector('[aria-invalid=\"true\"]');\n        if (firstInvalid) {\n            firstInvalid.focus();\n            firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    }\n    \n    /**\n     * Setup modal accessibility\n     */\n    setupModalAccessibility() {\n        // Handle modal open\n        document.addEventListener('modalOpen', (e) => {\n            const modal = e.detail.modal;\n            this.openModal(modal);\n        });\n        \n        // Handle modal close\n        document.addEventListener('modalClose', (e) => {\n            const modal = e.detail.modal;\n            this.closeModal(modal);\n        });\n    }\n    \n    /**\n     * Open modal with accessibility\n     */\n    openModal(modal) {\n        // Set ARIA attributes\n        modal.setAttribute('aria-hidden', 'false');\n        modal.setAttribute('role', 'dialog');\n        modal.setAttribute('aria-modal', 'true');\n        \n        // Set aria-labelledby if title exists\n        const title = modal.querySelector('.modal-title, h1, h2, h3');\n        if (title && !title.id) {\n            title.id = 'modal-title-' + Date.now();\n        }\n        if (title) {\n            modal.setAttribute('aria-labelledby', title.id);\n        }\n        \n        // Hide background content from screen readers\n        const mainContent = document.querySelector('main, .main-content');\n        if (mainContent) {\n            mainContent.setAttribute('aria-hidden', 'true');\n        }\n        \n        // Activate focus trap\n        this.activateFocusTrap(modal);\n        \n        // Announce modal opening\n        this.announce('Dialog opened');\n    }\n    \n    /**\n     * Close modal with accessibility\n     */\n    closeModal(modal) {\n        // Set ARIA attributes\n        modal.setAttribute('aria-hidden', 'true');\n        \n        // Show background content to screen readers\n        const mainContent = document.querySelector('main, .main-content');\n        if (mainContent) {\n            mainContent.setAttribute('aria-hidden', 'false');\n        }\n        \n        // Deactivate focus trap\n        this.deactivateFocusTrap();\n        \n        // Announce modal closing\n        this.announce('Dialog closed');\n    }\n    \n    /**\n     * Setup image alt text\n     */\n    setupImageAltText() {\n        const images = document.querySelectorAll('img');\n        \n        images.forEach(img => {\n            // Check if image has alt text\n            if (!img.hasAttribute('alt')) {\n                // Try to infer alt text from context\n                const altText = this.inferAltText(img);\n                img.setAttribute('alt', altText);\n            }\n            \n            // Mark decorative images\n            if (img.classList.contains('decorative') || img.getAttribute('role') === 'presentation') {\n                img.setAttribute('alt', '');\n            }\n        });\n    }\n    \n    /**\n     * Infer alt text from image context\n     */\n    inferAltText(img) {\n        // Check surrounding text\n        const parent = img.parentElement;\n        const caption = parent.querySelector('figcaption');\n        \n        if (caption) {\n            return caption.textContent.trim();\n        }\n        \n        // Check title attribute\n        if (img.title) {\n            return img.title;\n        }\n        \n        // Check data attributes\n        if (img.dataset.alt) {\n            return img.dataset.alt;\n        }\n        \n        // Check filename (last resort)\n        const src = img.src;\n        if (src) {\n            const filename = src.split('/').pop().split('.')[0];\n            return filename.replace(/[-_]/g, ' ');\n        }\n        \n        return 'Image';\n    }\n    \n    /**\n     * Enhance interactive elements\n     */\n    enhanceInteractiveElements() {\n        // Add role and tabindex to clickable elements\n        const clickableElements = document.querySelectorAll('[onclick], .clickable');\n        \n        clickableElements.forEach(element => {\n            if (!element.hasAttribute('role')) {\n                element.setAttribute('role', 'button');\n            }\n            if (!element.hasAttribute('tabindex')) {\n                element.setAttribute('tabindex', '0');\n            }\n        });\n        \n        // Enhance dropdowns\n        this.enhanceDropdowns();\n        \n        // Enhance tab interfaces\n        this.enhanceTabs();\n        \n        // Enhance accordions\n        this.enhanceAccordions();\n    }\n    \n    /**\n     * Enhance dropdown accessibility\n     */\n    enhanceDropdowns() {\n        const dropdowns = document.querySelectorAll('.dropdown');\n        \n        dropdowns.forEach(dropdown => {\n            const trigger = dropdown.querySelector('.dropdown-trigger');\n            const menu = dropdown.querySelector('.dropdown-menu');\n            \n            if (trigger && menu) {\n                // Set ARIA attributes\n                trigger.setAttribute('aria-haspopup', 'true');\n                trigger.setAttribute('aria-expanded', 'false');\n                menu.setAttribute('role', 'menu');\n                \n                // Add unique IDs\n                const menuId = 'dropdown-menu-' + Date.now();\n                menu.id = menuId;\n                trigger.setAttribute('aria-controls', menuId);\n                \n                // Add menu items role\n                const menuItems = menu.querySelectorAll('a, button');\n                menuItems.forEach(item => {\n                    item.setAttribute('role', 'menuitem');\n                });\n            }\n        });\n    }\n    \n    /**\n     * Enhance tab interface accessibility\n     */\n    enhanceTabs() {\n        const tabContainers = document.querySelectorAll('.tabs');\n        \n        tabContainers.forEach(container => {\n            const tabList = container.querySelector('.tab-list');\n            const tabs = container.querySelectorAll('.tab');\n            const panels = container.querySelectorAll('.tab-panel');\n            \n            if (tabList && tabs.length && panels.length) {\n                // Set tablist role\n                tabList.setAttribute('role', 'tablist');\n                \n                tabs.forEach((tab, index) => {\n                    const panel = panels[index];\n                    \n                    // Set tab attributes\n                    tab.setAttribute('role', 'tab');\n                    tab.setAttribute('aria-selected', index === 0 ? 'true' : 'false');\n                    tab.setAttribute('tabindex', index === 0 ? '0' : '-1');\n                    \n                    // Set panel attributes\n                    if (panel) {\n                        panel.setAttribute('role', 'tabpanel');\n                        panel.setAttribute('aria-hidden', index === 0 ? 'false' : 'true');\n                        \n                        // Create associations\n                        const tabId = 'tab-' + Date.now() + '-' + index;\n                        const panelId = 'panel-' + Date.now() + '-' + index;\n                        \n                        tab.id = tabId;\n                        panel.id = panelId;\n                        tab.setAttribute('aria-controls', panelId);\n                        panel.setAttribute('aria-labelledby', tabId);\n                    }\n                });\n            }\n        });\n    }\n    \n    /**\n     * Enhance accordion accessibility\n     */\n    enhanceAccordions() {\n        const accordions = document.querySelectorAll('.accordion');\n        \n        accordions.forEach(accordion => {\n            const headers = accordion.querySelectorAll('.accordion-header');\n            const panels = accordion.querySelectorAll('.accordion-panel');\n            \n            headers.forEach((header, index) => {\n                const panel = panels[index];\n                const button = header.querySelector('button') || header;\n                \n                if (panel) {\n                    // Set button attributes\n                    button.setAttribute('aria-expanded', 'false');\n                    \n                    // Create associations\n                    const headerId = 'accordion-header-' + Date.now() + '-' + index;\n                    const panelId = 'accordion-panel-' + Date.now() + '-' + index;\n                    \n                    button.id = headerId;\n                    panel.id = panelId;\n                    button.setAttribute('aria-controls', panelId);\n                    panel.setAttribute('aria-labelledby', headerId);\n                    panel.setAttribute('role', 'region');\n                }\n            });\n        });\n    }\n    \n    /**\n     * Setup color contrast toggle\n     */\n    setupColorContrastToggle() {\n        // Check for saved preference\n        const highContrast = localStorage.getItem('high-contrast') === 'true';\n        if (highContrast) {\n            document.body.classList.add('high-contrast');\n        }\n        \n        // Create toggle button\n        const toggleButton = document.createElement('button');\n        toggleButton.textContent = 'Toggle High Contrast';\n        toggleButton.className = 'contrast-toggle';\n        toggleButton.setAttribute('aria-label', 'Toggle high contrast mode');\n        \n        toggleButton.addEventListener('click', () => {\n            document.body.classList.toggle('high-contrast');\n            const isHighContrast = document.body.classList.contains('high-contrast');\n            localStorage.setItem('high-contrast', isHighContrast);\n            \n            this.announce(isHighContrast ? 'High contrast enabled' : 'High contrast disabled');\n        });\n        \n        // Add to accessibility toolbar if it exists\n        const toolbar = document.querySelector('.accessibility-toolbar');\n        if (toolbar) {\n            toolbar.appendChild(toggleButton);\n        }\n    }\n    \n    /**\n     * Setup reduced motion preference\n     */\n    setupReducedMotion() {\n        // Check for saved preference\n        const reducedMotion = localStorage.getItem('reduced-motion') === 'true';\n        if (reducedMotion) {\n            document.body.classList.add('reduced-motion');\n        }\n        \n        // Check system preference\n        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n        if (prefersReducedMotion) {\n            document.body.classList.add('reduced-motion');\n        }\n        \n        // Create toggle button\n        const toggleButton = document.createElement('button');\n        toggleButton.textContent = 'Toggle Animations';\n        toggleButton.className = 'motion-toggle';\n        toggleButton.setAttribute('aria-label', 'Toggle animations and motion');\n        \n        toggleButton.addEventListener('click', () => {\n            document.body.classList.toggle('reduced-motion');\n            const isReduced = document.body.classList.contains('reduced-motion');\n            localStorage.setItem('reduced-motion', isReduced);\n            \n            this.announce(isReduced ? 'Animations disabled' : 'Animations enabled');\n        });\n        \n        // Add to accessibility toolbar if it exists\n        const toolbar = document.querySelector('.accessibility-toolbar');\n        if (toolbar) {\n            toolbar.appendChild(toggleButton);\n        }\n    }\n    \n    /**\n     * Toggle expanded state\n     */\n    toggleExpanded(element) {\n        const isExpanded = element.getAttribute('aria-expanded') === 'true';\n        element.setAttribute('aria-expanded', (!isExpanded).toString());\n        \n        // Toggle associated content\n        const controls = element.getAttribute('aria-controls');\n        if (controls) {\n            const controlled = document.getElementById(controls);\n            if (controlled) {\n                controlled.setAttribute('aria-hidden', isExpanded.toString());\n            }\n        }\n    }\n    \n    /**\n     * Close dropdown\n     */\n    closeDropdown(dropdown) {\n        const trigger = dropdown.querySelector('[aria-expanded=\"true\"]');\n        if (trigger) {\n            trigger.setAttribute('aria-expanded', 'false');\n            trigger.focus();\n        }\n    }\n    \n    /**\n     * Get accessibility status\n     */\n    getAccessibilityStatus() {\n        return {\n            focusTrapActive: this.focusTrap.active,\n            keyboardNavigation: this.keyboardNavigation,\n            highContrast: document.body.classList.contains('high-contrast'),\n            reducedMotion: document.body.classList.contains('reduced-motion'),\n            announcements: this.announcements.length\n        };\n    }\n}\n\n// Auto-initialize accessibility manager\nlet accessibilityManager;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    accessibilityManager = new AccessibilityManager();\n    \n    // Expose globally\n    window.AccessibilityManager = accessibilityManager;\n});\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = AccessibilityManager;\n}